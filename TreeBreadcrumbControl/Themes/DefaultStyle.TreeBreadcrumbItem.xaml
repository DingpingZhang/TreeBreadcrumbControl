<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:markup="clr-namespace:WpfExtensions.Xaml.Markup;assembly=WpfExtensions.Xaml"
                    xmlns:treeBreadcrumbControl="clr-namespace:TreeBreadcrumbControl">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/TreeBreadcrumbControl;component/Fonts/Iconfont.xaml" />
        <ResourceDictionary Source="pack://application:,,,/TreeBreadcrumbControl;component/Themes/Converters.xaml" />
        <ResourceDictionary Source="pack://application:,,,/TreeBreadcrumbControl;component/Themes/CustomStyle.Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/TreeBreadcrumbControl;component/Themes/CustomStyle.ListBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/TreeBreadcrumbControl;component/Themes/CustomStyle.Popup.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate x:Key="BreadcrumbItemTemplate.PopupItem">
        <Border Padding="8 3">
            <TextBlock Text="{Binding}"
                       TextTrimming="CharacterEllipsis"
                       VerticalAlignment="Center"
                       FontSize="14" />
        </Border>
    </DataTemplate>

    <Style TargetType="{x:Type treeBreadcrumbControl:TreeBreadcrumbItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type treeBreadcrumbControl:TreeBreadcrumbItem}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button Grid.Column="0"
                                    Content="{Binding Path=Node, RelativeSource={RelativeSource TemplatedParent}}"
                                    Command="{Binding Path=InternalSetCurrentNodeCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                    CommandParameter="{TemplateBinding Node}"
                                    Style="{StaticResource ButtonStyle.BreadcrumbItem}" />
                            <ToggleButton x:Name="ExpandButton"
                                          Grid.Column="1"
                                          Visibility="{Binding Path=Node.Children, 
                                                               Converter={markup:Compose {StaticResource AnyOperator}, {StaticResource BooleanToVisibilityConverter}}, 
                                                               RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{StaticResource ButtonStyle.Iconfont}"
                                          Tag="{markup:If {Binding Path=IsChecked, ElementName=ExpandButton},
                                                          {StaticResource Iconfont.BottomArrow},
                                                          {StaticResource Iconfont.RightArrow}}" />

                            <!-- ReSharper disable once Xaml.MissingGridIndex -->
                            <Popup x:Name="PART_Popup"
                                   IsOpen="{Binding Path=IsChecked, ElementName=ExpandButton}"
                                   PlacementTarget="{Binding ElementName=ExpandButton}"
                                   Style="{StaticResource PopupStyle.Expand}">

                                <Popup.Resources>
                                    <treeBreadcrumbControl:BindingProxy x:Key="BindingProxy.Children"
                                                                        Value="{Binding Path=Node.Children, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <treeBreadcrumbControl:BindingProxy x:Key="BindingProxy.SetCurrentNodeCommand"
                                                                        Value="{Binding Path=InternalSetCurrentNodeCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Popup.Resources>

                                <Border Style="{StaticResource BorderStyle.PopupContent}">
                                    <Grid>
                                        <ListBox ItemsSource="{Binding Path=Value, Source={StaticResource BindingProxy.Children}}"
                                                 treeBreadcrumbControl:ControlHelper.RelayCommand="{Binding Path=Value, Source={StaticResource BindingProxy.SetCurrentNodeCommand}}"
                                                 ItemTemplate="{StaticResource BreadcrumbItemTemplate.PopupItem}"
                                                 Style="{StaticResource ListBoxStyle.Base}" />
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type treeBreadcrumbControl:TreeBreadcrumbRootItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type treeBreadcrumbControl:TreeBreadcrumbRootItem}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button Grid.Column="0"
                                    Command="{Binding Path=InternalSetCurrentNodeCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                    CommandParameter="{TemplateBinding Node}"
                                    FontSize="14"
                                    Tag="{StaticResource Iconfont.Home}"
                                    Style="{StaticResource ButtonStyle.Iconfont}" />
                            <ToggleButton x:Name="ExpandButton"
                                          Grid.Column="1">
                                <ToggleButton.Style>
                                    <Style TargetType="ToggleButton"
                                           BasedOn="{StaticResource ButtonStyle.Iconfont}">
                                        <Setter Property="Tag"
                                                Value="{markup:If {Binding Path=IsChecked, ElementName=ExpandButton},
                                                                  {StaticResource Iconfont.BottomArrow},
                                                                  {StaticResource Iconfont.RightArrow}}" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=OverflowItems, Converter={StaticResource AnyOperator}, RelativeSource={RelativeSource TemplatedParent}}"
                                                         Value="True">
                                                <Setter Property="Tag"
                                                        Value="{StaticResource Iconfont.DoubleLeftArrow}" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Path=Node.Children, Converter={StaticResource AnyOperator}, RelativeSource={RelativeSource TemplatedParent}}"
                                                         Value="False">
                                                <Setter Property="Visibility"
                                                        Value="Collapsed" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Path=IsTextMode, RelativeSource={RelativeSource TemplatedParent}}"
                                                         Value="True">
                                                <Setter Property="Visibility"
                                                        Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>

                            <!-- ReSharper disable once Xaml.MissingGridIndex -->
                            <Popup x:Name="PART_Popup"
                                   IsOpen="{Binding Path=IsChecked, ElementName=ExpandButton}"
                                   PlacementTarget="{Binding ElementName=ExpandButton}"
                                   Style="{StaticResource PopupStyle.Expand}">

                                <Popup.Resources>
                                    <treeBreadcrumbControl:BindingProxy x:Key="BindingProxy.Children"
                                                                        Value="{Binding Path=Node.Children, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <treeBreadcrumbControl:BindingProxy x:Key="BindingProxy.OverflowItems"
                                                                        Value="{Binding Path=OverflowItems, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <treeBreadcrumbControl:BindingProxy x:Key="BindingProxy.SetCurrentNodeCommand"
                                                                        Value="{Binding Path=InternalSetCurrentNodeCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Popup.Resources>

                                <Border Style="{StaticResource BorderStyle.PopupContent}">
                                    <Grid>
                                        <ListBox ItemsSource="{markup:If {Binding Path=Value, Converter={StaticResource AnyOperator}, Source={StaticResource BindingProxy.OverflowItems}},
                                                                         {Binding Path=Value, Converter={StaticResource ReverseOperator}, Source={StaticResource BindingProxy.OverflowItems}},
                                                                         {Binding Path=Value, Source={StaticResource BindingProxy.Children}}}"
                                                 treeBreadcrumbControl:ControlHelper.RelayCommand="{Binding Path=Value, Source={StaticResource BindingProxy.SetCurrentNodeCommand}}"
                                                 ItemTemplate="{StaticResource BreadcrumbItemTemplate.PopupItem}"
                                                 Style="{StaticResource ListBoxStyle.Base}" />
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>